predicted <- predict(quad.model,list(cars[,1]=timevals, I(cars[,1]^2)=timevals^2))
disvals = timevals*0.91329 + 0.09996timevals^2 + 2.47
disvals = timevals*0.91329 + 0.09996*timevals^2 + 2.47
line(timevals, disvals)
show()
abline(timevals, disvals)
plot(timevals, disvals)
lines(timevals, disvals)
help(lines)
plot(cars)
lines(timevals, disvals)
res = residuals(quad.model)
resid = list(res, cars[,1])
resid <- data.frame(res, cars[,1])
head(resid)
names(resid) <- c('Residuals', 'Speed')
head(resid)
resid <- resid[,c(2,1)]
resid
head(resid)
lines(resid)
lines(abs(resid))
plot(cars)
lines(timevals, disvals)
lines(abs(resid))
head(abs(resid))
plot(resid, type='p')
plot(cars)
av(cars[,1])
mean(cars[,1])
plot(cars[,1]-mean(cars[,1]), cars[,2]-mean(cars[,2]))
head(cars)
sd(cars[,1])
car1 <- (cars[,1]-mean(cars[,1]))/sd(cars[,1])
car2 <- (cars[,2]-mean(cars[,2]))/sd(cars[,2])
plot(car1, car2)
snorm <- car1
dnorm <- car2
model.norm <- lm(dnorm ~ snorm)
abline(model.norm)
summary(model.norm)
summary(carreg)
corr(car[,1], car[,2])
cor(car[,1], car[,2])
help(cor)
cor(cars)
logdist = log(cars[,2])
sp = cars[,1]
head(cars)
plot(logdist, sp)
plot(sp, logdist)
log.model = lm(logdist ~ sp)
abline(log.model)
plot(sp, logdist)
dist <- cars[,2]
plot(sp, dist)
curve(predict(g, data.frame(sp=x)))
curve(predict(log.model, data.frame(sp=x)))
logmod <- glm(dist ~ sp, gaussian(link = "log"))
plot(dist, sp)
plot(sp, dist)
curve(predict(logmod, data.frame(sp=x)), add=T)
?sim
??sim
?arm
??arm
?par
plot(sp, dist)
logmod
log.model
log.model = lm(logdist ~ sp)
summary(log.model)
?log.model
log.model$1
anove(log.model)
anova(log.model)
coefficients(log.model)
coefficients(log.model)[1]
coefficients(log.model)[2]
coefficients(log.model)[2]*2
coefficients(log.model)[2,2]
beta0 <- coefficients(log.model)[1]
beta1 <- coefficients(log.model)[2]
curve(exp(beta0+beta1*x), add=T)
abline(lm(dist~sp))
abline(lm(dist~sp), col='b')
abline(lm(dist~sp), col='blue')
curve(exp(beta0+beta1*x), add=T, col='red')
olsmodel <- lm(dist~sp)
summary(olsmodel)
summary(log.model)
judge <- USJudgeRatings
head(judge)
contacts <- judge[,1]
integ <- judge[,2]
demen <- judge[,3]
plot(contacts, integ)
plot(contacts, demen)
plot(integ, demen)
dilig <- judge[,4]
(integ, dilig)
plot(integ, dilig)
lm(integ ~ dilig + demen)
reg < -lm(integ ~ dilig + demen)
reg <- lm(integ ~ dilig + demen)
summary(reg)
abline(reg)
abline(reg)
clear
clear()
install.packages("rjags")
library('rjags')
install.packages("coda")
install.packages("coda")
library('rjags')
library('rjags')
install.packages("rjags")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
install.packages("devtools")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
library('rjags')
install.packages("rjags")
library(rjags)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
install.packages('rjags_4-4.zip', lib='/Users/Mike/Downloads',repos = NULL)
install.packages('rjags_4-4', lib='/Users/Mike/Downloads',repos = NULL)
library(rjags)
testmod <- jags.model(example3.jags, c('Z', 'Y'))
testmod <- jags.model(heart.bugs)
testmod <- jags.model('heart.bugs')
plot(testmod)
typeof(testmod)
testmod
?coda
uk_growth <- read.csv('Downloads/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2.csv')
growth <- read.csv('growth.csv')
growth
growth[2]
growth[,2]
growth[,]
growth <- read.csv('growth.csv')
growth
growth[,2]
growth[2,]
plot(growth[2,])
plot(growth[2,1:])
ukg <- growth[2,1:]
ukg <- growth[2,1:]
len(growth[2,])
length(growth[2,])
ukg <- growth[2,1:58]
ukg
ukg <- growth[2,2:58]
growth
ukg
plot(ukg)
install.packages('R2openbugs', type='source')
install.packages('R2OpenBUGS', type='source')
library(OpenBUGS)
library(R2OpenBUGS)
WINE="/opt/local/bin/wine"
WINEPATH="/opt/local/bin/winepath"
OpenBUGS.pgm="/Users/[username]/.wine/drive_c/Program Files/OpenBUGS321/OpenBUGS.exe"
baystdetect <- function(){
for (i in 1:N) {
for (t in 1:T) {
y[i,t] ~ dpois(m[i,t])
log(m[i,t]) <- log.mu[i,t] + log(E[i,t])
log.mu[i,t] <- z[i] * common[i,t] + (1-z[i]) * specific[i,t]
}
z[i] ~ dbern(0.95)
}
# Common-trend Model 1
for (i in 1:N) {
for (t in 1:T) {
y1[i,t] ~ dpois(mu1[i,t])
log(mu1[i,t]) <- log(E[i,t]) + alpha0 + eta[i] + gamma[t]
temp1[i,t] <- alpha0 + eta[i] + gamma[t]
common[i,t] <- cut(temp1[i,t])
}
eta[i] ~ dnorm(v[i],prec.eta)
}
# prior specifications for Model 1
alpha0 ~ dflat()
v[1:N] ~ car.normal(adj[],weights[],num[],prec.v)
gamma[1:T] ~ car.normal(adj.tm[],weights.tm[],num.tm[],prec.gamma)
prec.v <- pow(sigma.v,-2)
sigma.v ~ dnorm(0,1)I(0,)
prec.gamma <- pow(sigma.gamma,-2)
sigma.gamma ~ dnorm(0,1)I(0,)
prec.eta <- pow(sigma.eta,-2)
sigma.eta ~ dnorm(0,1)I(0,)
# Area-specific Model 2
for (i in 1:N) {
for (t in 1:T) {
y2[i,t] ~ dpois(mu2[i,t])
log(mu2[i,t]) <- log(E[i,t]) + u[i] + xi[i,t]
temp2[i,t] <- u[i] + xi[i,t]
specific[i,t] <- cut(temp2[i,t])
}
# area-specific trends
xi[i,1:T] ~ car.normal(adj.tm[],weights.tm[],num.tm[],prec.xi[i])
# area-specific intercepts (no smoothing)
u[i] ~ dnorm(0,0.001)
# hierarchical modelling of the local temporal variability
prec.xi[i] <- pow(var.xi[i],-1)
var.xi[i] <- exp(log.var.xi[i])
log.var.xi[i] ~ dnorm(mean.log.var.xi,prec.log.var.xi)
sigma.xi[i] <- pow(var.xi[i],0.5)
}
# hyper priors
mean.log.var.xi ~ dnorm(0,0.001)
prec.log.var.xi <- pow(var.log.var.xi,-1)
var.log.var.xi <- pow(sd.log.var.xi,2)
sd.log.var.xi ~ dnorm(0,prec.sd.log.var.xi)I(0,)
sd.sd.log.var.xi <- 2.5
prec.sd.log.var.xi <- pow(sd.sd.log.var.xi,-2)
}
baystdetect <- function(){
for (i in 1:N) {
for (t in 1:T) {
y[i,t] ~ dpois(m[i,t])
log(m[i,t]) <- log.mu[i,t] + log(E[i,t])
log.mu[i,t] <- z[i] * common[i,t] + (1-z[i]) * specific[i,t]
}
z[i] ~ dbern(0.95)
}
# Common-trend Model 1
for (i in 1:N) {
for (t in 1:T) {
y1[i,t] ~ dpois(mu1[i,t])
log(mu1[i,t]) <- log(E[i,t]) + alpha0 + eta[i] + gamma[t]
temp1[i,t] <- alpha0 + eta[i] + gamma[t]
common[i,t] <- cut(temp1[i,t])
}
eta[i] ~ dnorm(v[i],prec.eta)
}
# prior specifications for Model 1
alpha0 ~ dflat()
v[1:N] ~ car.normal(adj[],weights[],num[],prec.v)
gamma[1:T] ~ car.normal(adj.tm[],weights.tm[],num.tm[],prec.gamma)
prec.v <- pow(sigma.v,-2)
sigma.v ~ dnorm(0,1)%_%I(0,)
prec.gamma <- pow(sigma.gamma,-2)
sigma.gamma ~ dnorm(0,1)%_%I(0,)
prec.eta <- pow(sigma.eta,-2)
sigma.eta ~ dnorm(0,1)%_%I(0,)
# Area-specific Model 2
for (i in 1:N) {
for (t in 1:T) {
y2[i,t] ~ dpois(mu2[i,t])
log(mu2[i,t]) <- log(E[i,t]) + u[i] + xi[i,t]
temp2[i,t] <- u[i] + xi[i,t]
specific[i,t] <- cut(temp2[i,t])
}
# area-specific trends
xi[i,1:T] ~ car.normal(adj.tm[],weights.tm[],num.tm[],prec.xi[i])
# area-specific intercepts (no smoothing)
u[i] ~ dnorm(0,0.001)
# hierarchical modelling of the local temporal variability
prec.xi[i] <- pow(var.xi[i],-1)
var.xi[i] <- exp(log.var.xi[i])
log.var.xi[i] ~ dnorm(mean.log.var.xi,prec.log.var.xi)
sigma.xi[i] <- pow(var.xi[i],0.5)
}
# hyper priors
mean.log.var.xi ~ dnorm(0,0.001)
prec.log.var.xi <- pow(var.log.var.xi,-1)
var.log.var.xi <- pow(sd.log.var.xi,2)
sd.log.var.xi ~ dnorm(0,prec.sd.log.var.xi)I(0,)
sd.sd.log.var.xi <- 2.5
prec.sd.log.var.xi <- pow(sd.sd.log.var.xi,-2)
}
baystdetect <- function(){
for (i in 1:N) {
for (t in 1:T) {
y[i,t] ~ dpois(m[i,t])
log(m[i,t]) <- log.mu[i,t] + log(E[i,t])
log.mu[i,t] <- z[i] * common[i,t] + (1-z[i]) * specific[i,t]
}
z[i] ~ dbern(0.95)
}
# Common-trend Model 1
for (i in 1:N) {
for (t in 1:T) {
y1[i,t] ~ dpois(mu1[i,t])
log(mu1[i,t]) <- log(E[i,t]) + alpha0 + eta[i] + gamma[t]
temp1[i,t] <- alpha0 + eta[i] + gamma[t]
common[i,t] <- cut(temp1[i,t])
}
eta[i] ~ dnorm(v[i],prec.eta)
}
# prior specifications for Model 1
alpha0 ~ dflat()
v[1:N] ~ car.normal(adj[],weights[],num[],prec.v)
gamma[1:T] ~ car.normal(adj.tm[],weights.tm[],num.tm[],prec.gamma)
prec.v <- pow(sigma.v,-2)
sigma.v ~ dnorm(0,1)%_%I(0,)
prec.gamma <- pow(sigma.gamma,-2)
sigma.gamma ~ dnorm(0,1)%_%I(0,)
prec.eta <- pow(sigma.eta,-2)
sigma.eta ~ dnorm(0,1)%_%I(0,)
# Area-specific Model 2
for (i in 1:N) {
for (t in 1:T) {
y2[i,t] ~ dpois(mu2[i,t])
log(mu2[i,t]) <- log(E[i,t]) + u[i] + xi[i,t]
temp2[i,t] <- u[i] + xi[i,t]
specific[i,t] <- cut(temp2[i,t])
}
# area-specific trends
xi[i,1:T] ~ car.normal(adj.tm[],weights.tm[],num.tm[],prec.xi[i])
# area-specific intercepts (no smoothing)
u[i] ~ dnorm(0,0.001)
# hierarchical modelling of the local temporal variability
prec.xi[i] <- pow(var.xi[i],-1)
var.xi[i] <- exp(log.var.xi[i])
log.var.xi[i] ~ dnorm(mean.log.var.xi,prec.log.var.xi)
sigma.xi[i] <- pow(var.xi[i],0.5)
}
# hyper priors
mean.log.var.xi ~ dnorm(0,0.001)
prec.log.var.xi <- pow(var.log.var.xi,-1)
var.log.var.xi <- pow(sd.log.var.xi,2)
sd.log.var.xi ~ dnorm(0,prec.sd.log.var.xi)%_%I(0,)
sd.sd.log.var.xi <- 2.5
prec.sd.log.var.xi <- pow(sd.sd.log.var.xi,-2)
}
write.model(baystdetect, "baystdetect.txt")
model.file1 = paste(getwd(),"baystdetect.txt", sep="/")
file.show("bayestdetect.txt")
file.show("baystdetect.txt")
setwd("~/4th Year/project/model/bugs/")
observed <- read.csv('../../data/csv/simulated.csv')
setwd("~/4th Year/project/data/csv/")
load("~/4th Year/project/data/rdata/expected_data.Rda")
load("~/4th Year/project/data/rdata/simulated_data.Rda")
load("~/4th Year/project/data/rdata/unusual_areas.Rda")
library(sp)
library(shapefiles)
library(maptools)
library(rgdal)
library(spdep)
setwd("~/4th Year/project/data/shapefiles")
shape <- readOGR('.', 'CCG_BSC Feb2013  (clipcoast 200m)')
shape_deathtowales <- shape[shape@data$CCGname != 'Wales',]
shape_deathtoisleofwight <- shape_deathtowales[shape_deathtowales@data$CCGname != 'NHS Isle of Wight CCG',]
neib <- poly2nb(shape_deathtoisleofwight)
neib[0]
neib
as.list(neib)
card(beib)
card(neib)
neib$
sfiufb
neib$0
list(neib)
neib
length(neib)
1:3
neib2 <- poly2nb(shape_deathtoisleofwight, row.names=1:210)
neib2
neib2$0
neib2[0]
neib2[1]
neib2[2]
neib2[]
neib2[[]]
neib2[,]
neib2[]
test <- for i in 1:10{}
for(i in 1:210)
fwgwer
test <- c(neib[1])
test
test <- c(neib[1], neib[2])
test
test <- c(neib[1], neib[2], recursive=TRUE)
test
adj_list <- neib[1]
for(i in 2:210){
adj_list <- c(adj_list, neib[i], recursive=TRUE)
}
adj_list
cardinality = card(neib)
write.csv(adj_list, file='~/4th Year/project/data/csv/adj_list.csv')
write.csv(cardinality, file='~/4th Year/project/data/csv/card.csv')
adj_list = read.csv("../../data/csv/adj_list.csv")
View(adj_list)
adj_list = read.csv("../../data/csv/adj_list.csv", col_names=TRUE)
adj_list = read.csv("../../data/csv/adj_list.csv", skip=1)
View(adj_list)
adj_list = read.csv("../../data/csv/adj_list.csv")
adj_list
adj_list$X = NULL
View(adj_list)
View(observed)
observed$X = NULL
numRegions = dim(observed)[1]
nt = dim(observed)[2]
OpenBUGS.pgm="/Users/Mike/.wine/drive_c/Program Files/OpenBUGS321/OpenBUGS.exe"
cardinality = read.csv("../../data/csv/card.csv")
cardinality$X = NULL
View(cardinality)
weights <- rep(1, len(adj_list))
weights <- rep(1, dim(adj_list))
dim(adj_list)
dim(c(adj_list))
test <- c(adj_list)
len(test)
length(test)
test <- c(adj_list$x)
adj_list = read.csv("../../data/csv/adj_list.csv")$x
dim(adj_list)
length(adj_list)
weights <- rep(1, length(adj_list))
weights <- rep(1, length(adj_list))
num.tm[1] = 1; adj.tm[1] = 2
num.tm = list()
adj.tm = list()
num.tm[1] = 1; adj.tm[1] = 2
num.tm[2] = 2; adj.tm[2] = 1; adj.tm[3] = 3
num.tm[3] = 2; adj.tm[4] = 2; adj.tm[5] = 4
num.tm[4] = 2; adj.tm[6] = 3; adj.tm[7] = 5
num.tm[5] = 2; adj.tm[8] = 4; adj.tm[9] = 6
num.tm[6] = 2; adj.tm[10] = 5; adj.tm[11] = 7
num.tm[7] = 2; adj.tm[12] = 6; adj.tm[13] = 8
num.tm[8] = 2; adj.tm[14] = 7; adj.tm[15] = 9
num.tm[9] = 2; adj.tm[16] = 8; adj.tm[17] = 10
num.tm[10] = 2; adj.tm[18] = 9; adj.tm[19] = 11
num.tm[11] = 2; adj.tm[20] = 10; adj.tm[21] = 12
num.tm[12] = 2; adj.tm[22] = 11; adj.tm[23] = 13
num.tm[13] = 2; adj.tm[24] = 12; adj.tm[25] = 14
num.tm[14] = 2; adj.tm[26] = 13; adj.tm[27] = 15
num.tm[15] = 1; adj.tm[28] = 14
weights.tm <- rep(1, length(adj.tm))
data <- list('N', 'T')
data
data <- list(y = observed, N = numRegions, T = nt, adj=adj, weights=weights, num=cardinality, adj.tm=adj.tm,
weights.tm=weights.tm, num.tm=num.tm)
data <- list(y = observed, N = numRegions, T = nt, adj=adj_list, weights=weights, num=cardinality, adj.tm=adj.tm,
weights.tm=weights.tm, num.tm=num.tm)
weights.tm <- rep(1, length(adj.tm))
WINE="/usr/local/bin/wine"
WINEPATH="/usr/local/bin/winepath"
OpenBUGS.pgm="/Users/Mike/.wine/drive_c/Program Files (x86)/OpenBUGS/OpenBUGS323/OpenBUGS.exe"
bayst_trace <- bugs(data, model.file = model.file1,n.chains = 3, n.iter = 1000,
OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
data <- list(y = as.matrix(observed), N = numRegions, T = nt, adj=adj_list, weights=weights, num=cardinality, adj.tm=adj.tm,
weights.tm=weights.tm, num.tm=num.tm)
bayst_trace <- bugs(data, model.file = model.file1,n.chains = 3, n.iter = 1000,
OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
data <- list(y = as.matrix(observed), N = numRegions, T = nt, adj=adj_list, weights=weights, num=c(cardinality), adj.tm=adj.tm,
weights.tm=weights.tm, num.tm=num.tm)
bayst_trace <- bugs(data, model.file = model.file1,n.chains = 3, n.iter = 1000,
OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
data <- list(y = as.matrix(observed), N = numRegions, T = nt, adj=c(adj_list), weights=weights, num=c(cardinality), adj.tm=adj.tm,
weights.tm=weights.tm, num.tm=num.tm)
bayst_trace <- bugs(data, model.file = model.file1,n.chains = 3, n.iter = 1000,
OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
observed
as.matrix(observed)
setwd("~/4th Year/project/model/cut model")
general <- read.csv('general.csv')
specific <- read.csv('specific.csv')
observed <- read.csv('../../data/csv/simulated.csv')
library(rjags)
observed$X = NULL
specific$X = NULL
general$X = NULL
numRegions = dim(observed)[1]
nt = dim(observed)[2]
prop_unusual = 15/210
cut_model <- jags.model('cut.jags',
data = list('N' = numRegions,
'prop_unusual' = prop_unusual,
'T' = nt,
'general' = general,
'specific' = specific,
'y' = observed),
n.chains = 4,
n.adapt = 10000)
predict_mcarray <- coda.samples(cut_model,
c('z'),
n.iter = 10000)
predict <- as.matrix(predict_mcarray)
predict_av <- colMeans(predict)
predict_sorted <- sort(predict_av, index.return=TRUE)
predict_values <- predict_sorted$x
predict_regions <- predict_sorted$ix
predict_regions
write.csv(predict_regions, 'predicted.csv')
write.csv(predict_values, 'values.csv')
predict_values
