plot(my_seq*10000, test_cv_var[1]/my_seq, type='l', col='red', axes=F, xlab='', ylab='', xlim=c(0,200000), lty=1)
title("Variance of Mean-Value Beta-Estimator with Control Vairables")
legend(130000,0.000035,legend=c("simulated","fitted"),lty=1, col=c('black', 'red'))
test_hm_var <- hit_or_miss_improved_variance()
reps <- seq(10000, 200000, by=10000)
plot(reps, test_hm_var, type='l', xlab='Size of sample', ylab='Variance', xlim=c(0,200000))
par(new=T)
my_seq <- seq(1, 20, by=0.001)
plot(my_seq*10000, test_hm_var[1]/my_seq, type='l', col='red', axes=F, xlab='', ylab='', xlim=c(0,200000), lty=1)
test_hm_var <- hit_or_miss_improved_variance()
reps <- seq(10000, 200000, by=10000)
plot(reps, test_hm_var, type='l', xlab='Size of sample', ylab='Variance', xlim=c(0,200000))
par(new=T)
my_seq <- seq(1, 20, by=0.001)
plot(my_seq*10000, test_hm_var[1]/my_seq, type='l', col='red', axes=F, xlab='', ylab='', xlim=c(0,200000), lty=1)
title("Variance of Hit-or-Miss Estimator with Stratified Sampling")
legend(130000,0.0003,legend=c("simulated","fitted"),lty=1, col=c('black', 'red'))
test_hm_var[1]*10000 # = 5.742095
M_calculate(1.4,2.05)
source('3rd Year Documents//Stochastic simulation/CW/stochastic.R')
mean_value(1000000)
rejection(1000000)
t<-rejection(1000000)
t<-rejection(1000000)
source('3rd Year Documents//Stochastic simulation/CW/stochastic.R')
variance_pdf(100000)
output <- read.delim("~/3rd Year Documents/Scientific computing/Courseworks/Coursework #4/N_count/output.txt")
View(output)
output[1,]
output[,1]
plot(output[,1], output[,2])
plot(output[,1], output[,2], type='l')
save.image("~/3rd Year Documents/Scientific computing/Courseworks/Coursework #4/output1.RData")
2^32
plot(output[,1], log(output[,2]), type='l')
summary(output)
data3706495767904508615 <- read.csv("~/Downloads/data3706495767904508615.csv", header=FALSE)
View(data3706495767904508615)
rpi <- read.csv("~/Downloads/data3706495767904508615.csv", header=FALSE)
View(data3706495767904508615)
View(data3706495767904508615)
View(rpi)
plot(rpi)
plot(rpi, type='l')
plot(rpi, type='l', col='red')
title('RPI')
output <- read.csv("~/3rd Year Documents/Scientific computing/Courseworks/Coursework #5/Q4pt1/output.csv", header=FALSE)
View(output)
plot(output)
plot(output[])
plot(output[], type='l')
plot(output, type='l')
plot(output, col='red')
?plot
plot(output[], type='p')
plot(output, type='l')
myshit <- as.vector(output)
plot(myshit, type='l')
myshit
plot(myshit)
output[,2]
output[2,]
output[1,]
as.vector(output[1,])
myshit <- as.vector(output[1,])
plot(myshit)
plot(myshit, type='l')
plot(myshit, type='l')
norm1000 <- rnorm(1000)
plot (norm1000, type='l')
ar64 <- ar_process()
source('~/Documents/Stuff/timeseries_functions.R')
ar64 <- ar_process()
plot(ar64, type='l')
plot(my_pgram(ar64), type='l')
plot(my_pgram(norm1000), type='l')
plot(my_pgram(rnorm(1000000)), type='l')
plot(ar64, type='l')
source('~/Documents/Stuff/timeseries_functions.R')
ar64 <- ar_process()
plot(ar64, type='l')
hist(ar64)
summary(ar64)
specgram(ar64)
source(signal)
source('signal')
library(signal)
library('signal')
install.packages("signal")
source('~/Documents/Stuff/timeseries_functions.R')
sample1 <- rnorm(10000)
seq(1, 10, length=10)
seq(1, 10, length=100)
temp <- seq(1, 10, length=10000)
linear_rand <- temp + sample1*3
plot(linear_rand)
test_data <- seq(1, 10, length=50) + rnorm(50)*3
plot(test_data)
summary(test_data)
source(datasets)
help(datasets)
library('datasets')
datasets(cars)
library(help = "datasets")
cars
cars[1;]
cars[1:]
cars[1,:]
cars[1,]
cars[,0]
cars[,1]
cars[,2]
plot(cars)
lm(cars[,2] ~ cars[,1])
carreg = lm(cars[,2] ~ cars[,1])
carreg(residuals)
residuals(carreg)
abline(carreg)
summary(carreg)
cars[1:10,1]
cars[1:10,1]^2
lm(cars[,2] ~ cars[,1] + cars[,1]^2)
lm(cars[,2] ~ cars[,1] + I(cars[,1]^2))
abline(lm(cars[,2] ~ cars[,1] + I(cars[,1]^2)))
quad.model = lm(cars[,2] ~ cars[,1] + I(cars[,1]^2))
timevals = seq(from=5, to=25, by=0.1)
predicted <- predict(quad.model,list(cars[,1]=timevals, I(cars[,1]^2)=timevals^2))
disvals = timevals*0.91329 + 0.09996timevals^2 + 2.47
disvals = timevals*0.91329 + 0.09996*timevals^2 + 2.47
line(timevals, disvals)
show()
abline(timevals, disvals)
plot(timevals, disvals)
lines(timevals, disvals)
help(lines)
plot(cars)
lines(timevals, disvals)
res = residuals(quad.model)
resid = list(res, cars[,1])
resid <- data.frame(res, cars[,1])
head(resid)
names(resid) <- c('Residuals', 'Speed')
head(resid)
resid <- resid[,c(2,1)]
resid
head(resid)
lines(resid)
lines(abs(resid))
plot(cars)
lines(timevals, disvals)
lines(abs(resid))
head(abs(resid))
plot(resid, type='p')
plot(cars)
av(cars[,1])
mean(cars[,1])
plot(cars[,1]-mean(cars[,1]), cars[,2]-mean(cars[,2]))
head(cars)
sd(cars[,1])
car1 <- (cars[,1]-mean(cars[,1]))/sd(cars[,1])
car2 <- (cars[,2]-mean(cars[,2]))/sd(cars[,2])
plot(car1, car2)
snorm <- car1
dnorm <- car2
model.norm <- lm(dnorm ~ snorm)
abline(model.norm)
summary(model.norm)
summary(carreg)
corr(car[,1], car[,2])
cor(car[,1], car[,2])
help(cor)
cor(cars)
logdist = log(cars[,2])
sp = cars[,1]
head(cars)
plot(logdist, sp)
plot(sp, logdist)
log.model = lm(logdist ~ sp)
abline(log.model)
plot(sp, logdist)
dist <- cars[,2]
plot(sp, dist)
curve(predict(g, data.frame(sp=x)))
curve(predict(log.model, data.frame(sp=x)))
logmod <- glm(dist ~ sp, gaussian(link = "log"))
plot(dist, sp)
plot(sp, dist)
curve(predict(logmod, data.frame(sp=x)), add=T)
?sim
??sim
?arm
??arm
?par
plot(sp, dist)
logmod
log.model
log.model = lm(logdist ~ sp)
summary(log.model)
?log.model
log.model$1
anove(log.model)
anova(log.model)
coefficients(log.model)
coefficients(log.model)[1]
coefficients(log.model)[2]
coefficients(log.model)[2]*2
coefficients(log.model)[2,2]
beta0 <- coefficients(log.model)[1]
beta1 <- coefficients(log.model)[2]
curve(exp(beta0+beta1*x), add=T)
abline(lm(dist~sp))
abline(lm(dist~sp), col='b')
abline(lm(dist~sp), col='blue')
curve(exp(beta0+beta1*x), add=T, col='red')
olsmodel <- lm(dist~sp)
summary(olsmodel)
summary(log.model)
judge <- USJudgeRatings
head(judge)
contacts <- judge[,1]
integ <- judge[,2]
demen <- judge[,3]
plot(contacts, integ)
plot(contacts, demen)
plot(integ, demen)
dilig <- judge[,4]
(integ, dilig)
plot(integ, dilig)
lm(integ ~ dilig + demen)
reg < -lm(integ ~ dilig + demen)
reg <- lm(integ ~ dilig + demen)
summary(reg)
abline(reg)
abline(reg)
clear
clear()
install.packages("rjags")
library('rjags')
install.packages("coda")
install.packages("coda")
library('rjags')
library('rjags')
install.packages("rjags")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
install.packages("devtools")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
library('rjags')
install.packages("rjags")
library(rjags)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
install.packages('rjags_4-4.zip', lib='/Users/Mike/Downloads',repos = NULL)
install.packages('rjags_4-4', lib='/Users/Mike/Downloads',repos = NULL)
library(rjags)
testmod <- jags.model(example3.jags, c('Z', 'Y'))
testmod <- jags.model(heart.bugs)
testmod <- jags.model('heart.bugs')
plot(testmod)
typeof(testmod)
testmod
?coda
uk_growth <- read.csv('Downloads/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2.csv')
growth <- read.csv('growth.csv')
growth
growth[2]
growth[,2]
growth[,]
growth <- read.csv('growth.csv')
growth
growth[,2]
growth[2,]
plot(growth[2,])
plot(growth[2,1:])
ukg <- growth[2,1:]
ukg <- growth[2,1:]
len(growth[2,])
length(growth[2,])
ukg <- growth[2,1:58]
ukg
ukg <- growth[2,2:58]
growth
ukg
plot(ukg)
setwd("~/4th Year/project/model/beta model")
int(8.5)
integer(8.5)
floor(8.5)
test = [1, 4, 2]
test = c(1, 4, 2)
sum(test)/2
floor(sum(test)/2)
setwd("~/4th Year/project/model/beta model")
W = read.csv("../../data/csv/adjacency.csv")
View(W)
W = read.csv("../../data/csv/adjacency.csv", header=TRUE)
View(W)
W = read.csv("../../data/csv/adjacency.csv")
dim(W)
W = read.csv("../../data/csv/adjacency.csv", row.names=NULL)
W = read.csv("../../data/csv/adjacency.csv", row.names=FALSE)
dim(W)
dim(as.matrix(W))
W = read.csv("../../data/csv/adjacency.csv")
W$X = NULL
W_n = floor(sum(W))
observed = read.csv("../../data/csv/simulated.csv")
expected = read.csv("../../data/csv/expected.csv")
observed$X = NULL
expected$X = NULL
View(observed)
log(expected)
expected
dim(observed)
dim(observed)[1]
numRegions = dim(observed)[1]
nt = dim(observed)[2]
alpha = 0.9
log_expected = log(expected)
numRegions = dim(observed)[1]
nt = dim(observed)[2]
alpha = 0.9
model_data <- list(numRegions = numRegions,
nt = nt,
observed = observed,
log_expected = log_expected,
W_n = W_n,
W = W,
alpha = alpha)
library(rstan)
model <- stan_model(file = "beta_model.stan")
install.packages(rstan)
install.packages('rstan')
install.packages("rstan")
source('http://mc-stan.org/rstan/install.R', echo = TRUE, max.deparse.length = 2000)
install.packages("rstan", type='source')
library(rstan)
model <- stan_model(file = "beta_model.stan")
model <- stan_model(file = "beta_model.stan")
model_advi <- vb(model, data=model_data)
model_nuts <- sampling(rats_model, data = model_data, chains = 2, iter = 100)
model_nuts <- sampling(model, data = model_data, chains = 2, iter = 100)
View(observed)
type(log_expected)
c(log_expected)
log_expected
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
model_nuts <- sampling(model, data = model_data, chains = 2, iter = 100)
View(log_expected)
log_expected = c(log(expected))
model_nuts <- sampling(model, data = model_data, chains = 2, iter = 100)
log_expected
log_expected$x
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected$x,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
model_nuts <- sampling(model, data = model_data, chains = 2, iter = 100)
numRegions = nrow(observed)
W_n = floor(sum(W)/2)
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected$x,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
model_nuts <- sampling(model, data = model_data, chains = 2, iter = 100)
model_advi <- vb(model, data=model_data)
model_advi
print(model_advi)
print(model_advi, pars = 'prop_unusual')
model_advi$`prop_unusual`
test <- model_advi$`prop_unusual`
test
test <- model_advi$`prop_unusual`
test <- model_advi$prop_unusual
model_data <- extract(model_advi)
pred <- model_data$prop_unusual
test <- mean(pred, axis=1)
test <- colMeans(pred)
test
sort(test)
test
result <- sort(test, index.return=TRUE)
result
sort(model_data$constant, index.return=TRUE)
sort(colMeans(model_data$constant), index.return=TRUE)
test <- model_data$constant
mean(test)
sort(colMeans(model_data$ind_constant), index.return=TRUE)
model <- stan_model(file = "beta_model.stan")
model_advi <- vb(model, data=model_data)
print(model_advi)
model_advi <- vb(model, data=model_data)
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected$x,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
model_advi <- vb(model, data=model_data)
model_data <- extract(model_advi)
result_unsorted <- colMeans(model_data$prop_unusual)
result <- sort(result_unsorted, index.return=TRUE)
result
temp <- model_data$temporal
temporal <- colMeans(temp)
plot(temporal)
plot(temporal, 'l')
line(temporal)
plot(temporal, type='l')
temp <- model_data$ind_temporal
dim(temp)
test <- colMeans(temp)
dim(test)
plot(test[1], type='l')
test[1,]
plot(test[1,], type='l')
plot(test[2,], type='l')
plot(test[3,], type='l')
plot(test[4,], type='l')
plot(test[5,], type='l')
plot(test[6,], type='l')
plot(test[9,], type='l')
plot(test[10,], type='l')
plot(test[11,], type='l')
plot(test[82,], type='l')
plot(test[83,], type='l')
model <- stan_model(file = "beta_model.stan")
model_advi <- vb(model, data=model_data)
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected$x,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
model_advi <- vb(model, data=model_data)
model_data <- extract(model_advi)
result_unsorted <- colMeans(model_data$prop_unusual)
result <- sort(result_unsorted, index.return=TRUE)
result
model_nuts <- sampling(model, data = model_data, chains = 3, iter = 1000)
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected$x,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
model_nuts <- sampling(model, data = model_data, chains = 3, iter = 1000)
model_nuts <- sampling(model, data = model_data, chains = 3, iter = 100)
setwd("~/4th Year/project/model/cut model")
general <- read.csv('general.csv')
specific <- read.csv('specific.csv')
observed <- read.csv('../../data/csv/simulated.csv')
library(rjags)
numRegions = dim(observed)[1]
nt = dim(observed)[2]
cut_model <- jags.model('cut.jags',
data = list('N' = numRegions,
'prop_unusual' = prop_unusual,
'T' = nt,
'general' = general,
'specific' = specific,
'y' = observed),
n.chains = 4,
n.adapt = 10000)
predict_mcarray <- coda.samples(cut_model,
c('z'),
n.iter = 10000)
library(rjags)
cut_model <- jags.model('cut.jags',
data = list('N' = numRegions,
'prop_unusual' = prop_unusual,
'T' = nt,
'general' = general,
'specific' = specific,
'y' = observed),
n.chains = 4,
n.adapt = 10000)
jags.model()
jags.model(vsdgr)
jags.model(vsdgr===)
4*9
