plot(ar64, type='l')
plot(my_pgram(ar64), type='l')
plot(my_pgram(norm1000), type='l')
plot(my_pgram(rnorm(1000000)), type='l')
plot(ar64, type='l')
source('~/Documents/Stuff/timeseries_functions.R')
ar64 <- ar_process()
plot(ar64, type='l')
hist(ar64)
summary(ar64)
specgram(ar64)
source(signal)
source('signal')
library(signal)
library('signal')
install.packages("signal")
source('~/Documents/Stuff/timeseries_functions.R')
sample1 <- rnorm(10000)
seq(1, 10, length=10)
seq(1, 10, length=100)
temp <- seq(1, 10, length=10000)
linear_rand <- temp + sample1*3
plot(linear_rand)
test_data <- seq(1, 10, length=50) + rnorm(50)*3
plot(test_data)
summary(test_data)
source(datasets)
help(datasets)
library('datasets')
datasets(cars)
library(help = "datasets")
cars
cars[1;]
cars[1:]
cars[1,:]
cars[1,]
cars[,0]
cars[,1]
cars[,2]
plot(cars)
lm(cars[,2] ~ cars[,1])
carreg = lm(cars[,2] ~ cars[,1])
carreg(residuals)
residuals(carreg)
abline(carreg)
summary(carreg)
cars[1:10,1]
cars[1:10,1]^2
lm(cars[,2] ~ cars[,1] + cars[,1]^2)
lm(cars[,2] ~ cars[,1] + I(cars[,1]^2))
abline(lm(cars[,2] ~ cars[,1] + I(cars[,1]^2)))
quad.model = lm(cars[,2] ~ cars[,1] + I(cars[,1]^2))
timevals = seq(from=5, to=25, by=0.1)
predicted <- predict(quad.model,list(cars[,1]=timevals, I(cars[,1]^2)=timevals^2))
disvals = timevals*0.91329 + 0.09996timevals^2 + 2.47
disvals = timevals*0.91329 + 0.09996*timevals^2 + 2.47
line(timevals, disvals)
show()
abline(timevals, disvals)
plot(timevals, disvals)
lines(timevals, disvals)
help(lines)
plot(cars)
lines(timevals, disvals)
res = residuals(quad.model)
resid = list(res, cars[,1])
resid <- data.frame(res, cars[,1])
head(resid)
names(resid) <- c('Residuals', 'Speed')
head(resid)
resid <- resid[,c(2,1)]
resid
head(resid)
lines(resid)
lines(abs(resid))
plot(cars)
lines(timevals, disvals)
lines(abs(resid))
head(abs(resid))
plot(resid, type='p')
plot(cars)
av(cars[,1])
mean(cars[,1])
plot(cars[,1]-mean(cars[,1]), cars[,2]-mean(cars[,2]))
head(cars)
sd(cars[,1])
car1 <- (cars[,1]-mean(cars[,1]))/sd(cars[,1])
car2 <- (cars[,2]-mean(cars[,2]))/sd(cars[,2])
plot(car1, car2)
snorm <- car1
dnorm <- car2
model.norm <- lm(dnorm ~ snorm)
abline(model.norm)
summary(model.norm)
summary(carreg)
corr(car[,1], car[,2])
cor(car[,1], car[,2])
help(cor)
cor(cars)
logdist = log(cars[,2])
sp = cars[,1]
head(cars)
plot(logdist, sp)
plot(sp, logdist)
log.model = lm(logdist ~ sp)
abline(log.model)
plot(sp, logdist)
dist <- cars[,2]
plot(sp, dist)
curve(predict(g, data.frame(sp=x)))
curve(predict(log.model, data.frame(sp=x)))
logmod <- glm(dist ~ sp, gaussian(link = "log"))
plot(dist, sp)
plot(sp, dist)
curve(predict(logmod, data.frame(sp=x)), add=T)
?sim
??sim
?arm
??arm
?par
plot(sp, dist)
logmod
log.model
log.model = lm(logdist ~ sp)
summary(log.model)
?log.model
log.model$1
anove(log.model)
anova(log.model)
coefficients(log.model)
coefficients(log.model)[1]
coefficients(log.model)[2]
coefficients(log.model)[2]*2
coefficients(log.model)[2,2]
beta0 <- coefficients(log.model)[1]
beta1 <- coefficients(log.model)[2]
curve(exp(beta0+beta1*x), add=T)
abline(lm(dist~sp))
abline(lm(dist~sp), col='b')
abline(lm(dist~sp), col='blue')
curve(exp(beta0+beta1*x), add=T, col='red')
olsmodel <- lm(dist~sp)
summary(olsmodel)
summary(log.model)
judge <- USJudgeRatings
head(judge)
contacts <- judge[,1]
integ <- judge[,2]
demen <- judge[,3]
plot(contacts, integ)
plot(contacts, demen)
plot(integ, demen)
dilig <- judge[,4]
(integ, dilig)
plot(integ, dilig)
lm(integ ~ dilig + demen)
reg < -lm(integ ~ dilig + demen)
reg <- lm(integ ~ dilig + demen)
summary(reg)
abline(reg)
abline(reg)
clear
clear()
install.packages("rjags")
library('rjags')
install.packages("coda")
install.packages("coda")
library('rjags')
library('rjags')
install.packages("rjags")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
install.packages("devtools")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
library('rjags')
install.packages("rjags")
library(rjags)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
install.packages('rjags_4-4.zip', lib='/Users/Mike/Downloads',repos = NULL)
install.packages('rjags_4-4', lib='/Users/Mike/Downloads',repos = NULL)
library(rjags)
testmod <- jags.model(example3.jags, c('Z', 'Y'))
testmod <- jags.model(heart.bugs)
testmod <- jags.model('heart.bugs')
plot(testmod)
typeof(testmod)
testmod
?coda
uk_growth <- read.csv('Downloads/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2.csv')
growth <- read.csv('growth.csv')
growth
growth[2]
growth[,2]
growth[,]
growth <- read.csv('growth.csv')
growth
growth[,2]
growth[2,]
plot(growth[2,])
plot(growth[2,1:])
ukg <- growth[2,1:]
ukg <- growth[2,1:]
len(growth[2,])
length(growth[2,])
ukg <- growth[2,1:58]
ukg
ukg <- growth[2,2:58]
growth
ukg
plot(ukg)
setwd("~/4th Year/project/model/alt cut/")
general <- read.csv('general.csv')
specific <- read.csv('specific.csv')
observed <- read.csv('../../data/csv/simulated_spatial_corr.csv')
observed$X = NULL
specific$X = NULL
general$X = NULL
library(rjags)
general_sample_unshaped <- read.csv('general_sample.csv', header=FALSE)
general_sample_unshaped <- general_sample_unshaped$V1
general_sample <- aperm(array(general_sample_unshaped, dim=c(15, 210, 20)))
specific_sample_unshaped <- read.csv('specific_sample.csv', header=FALSE)
specific_sample_unshaped <- specific_sample_unshaped$V1
specific_sample <- aperm(array(specific_sample_unshaped, dim=c(15, 210, 20)))
numSamples <- 20
general_flat <- matrix(0, nrow=210, ncol=numSamples*15)
for(i in 1:210) {
for(sample in 0:(numSamples-1)) {
general_flat[i, (1+15*sample):((sample+1)*15)] <- general_sample[sample+1, i, ]
}
}
specific_flat <- matrix(0, nrow=210, ncol=numSamples*15)
for(i in 1:210) {
for(sample in 0:(numSamples-1)) {
specific_flat[i, (1+15*sample):((sample+1)*15)] <- specific_sample[sample+1, i, ]
}
}
observed_duplicated <- matrix(0, nrow=210, ncol=numSamples*15)
for(i in 0:(numSamples-1)) {
observed_duplicated[,(i*15+1):((i+1)*15)] <- as.matrix(observed)
}
numRegions = dim(observed)[1]
nt = dim(observed)[2]
prop_unusual = 15/210
cut_model_sampling <- jags.model('cutNew.jags',
data = list('N' = numRegions,
'prop_unusual' = prop_unusual,
'T' = nt,
'numSamples' = numSamples,
'general_flat' = general_flat,
'specific_flat' = specific_flat,
'y' = observed_duplicated),
n.chains = 4,
n.adapt = 1000)
predict_samples <- coda.samples(cut_model_sampling,
c('z'),
n.iter = 10000)
predict <- as.matrix(predict_samples)
predict_av <- colMeans(predict)
predict_sorted <- sort(predict_av, index.return=TRUE)
predict_values <- predict_sorted$x
predict_regions <- predict_sorted$ix
predict_sorted
library(shapefiles)
library(maptools)
library(CARBayesdata)
library(rgdal)
library(spdep)
library(classInt)
library(RColorBrewer)
setwd("~/4th Year/project/data/shapefiles")
shape <- readOGR('.', 'CCG_BSC Feb2013  (clipcoast 200m)')
setwd("~/4th Year/project/data/shapefiles")
shape <- readOGR('.', 'CCG_BSC Feb2013  (clipcoast 200m)')
shape_deathtowales <- shape[shape@data$CCGname != 'Wales',]
shape_deathtoisleofwight <- shape_deathtowales[shape_deathtowales@data$CCGname != 'NHS Isle of Wight CCG',]
shape.basic <- readOGR('.', 'CCG_BSC Feb2013  (clipcoast 200m)')
shape_deathtowales <- shape.basic[shape.basic@data$CCGname != 'Wales',]
shape <- shape_deathtowales[shape_deathtowales@data$CCGname != 'NHS Isle of Wight CCG',]
load("~/4th Year/project/data/rdata/expected_data.Rda")
asthma <- asthma_expected_i[asthma_expected_i$CCG != '10L',]
expected = as.vector(asthma['E']$E)
unusual_temp <- read.csv('~/4th Year/project/data/csv/prefUnusual.csv', header=FALSE)
unusual <- sort(unusual_temp$V1) + 1 #add one as python had zero index
unusual
plot(shape["SP_ID"] =2)
plot(shape["SP_ID"=2])
plot(shape["SP_ID"==2])
summary(shape)
colnames(shape)
rownames(shape)
shape$Regioncode
shape$CCGcode
shape$SP_ID
plot(shape[shape$SP_ID == 2])
plot(shape[shape$SP_ID == 2,])
plot(shape)
plot(shape[shape$SP_ID == unusual, ], col='blue')
unusual
numRegions <- length(shape@data$SP_ID)
cols <- rep('blue', numRegions)
cols[unusual] <- rep('red', length(unusual))
plot(shape, col=cols)
dbeta(0.5, 19/40, 1/40)
dbeta(0, 19/40, 1/40)
beta.dens <- dbeta(0:10000/10000, 19/40, 1/40)
plot(beta.dens)
plot(beta.dens, type='l')
rbeta(5, 19/40, 1/40)
hist(rbeta(100, 19/40, 1/40))
hist(rbeta(10000, 19/40, 1/40))
hist(rbeta(10000, 19/100, 1/100))
hist(rbeta(10000, 19/20, 1/20))
unusual
beta(19/40, 1/40)
beta(19/40, 1/40)
rbeta(10, 19/40, 1/40)
rbeta(10, 19/40, 1/40)
rbeta(10, 19/40, 1/40)
rbeta(10, 19/40, 1/40)
rbeta(50, 1/40, 19/40)
rbeta(50, 19/40, 1/40)
rbeta(50, 19/40, 1/40)
rbeta(50, 19/40, 1/40)
rbeta(50, 19/40, 1/40)
rbeta(50, 19/20, 1/20)
rbeta(50, 19/20, 1/20)
rbeta(50, 0.1, 0.1)
rbeta(10, 0.1, 0.1)
rbeta(10, 0.5, 0.5)
regions_identified <- c(6, 10, 41, 75, 82, 83, 101, 107, 156, 178, 202)
anom_regions <- c(159, 67, 37, 145)
not_identified <- c(29, 57, 105, 196)
numRegions <- length(shape@data$SP_ID)
cols <- rep('white', numRegions)
cols[regions_identified] <- rep('forestgreen', length(regions_identified))
cols[anom_regions] <- rep('firebrick2', length(anom_regions))
cols[not_identified] <- rep('dodgerblue', length(not_identified))
plot(shape, col=cols)
plot(shape[shape$SP_ID == 29])
plot(shape[shape$SP_ID == 29,])
plot(shape[shape$SP_ID == 57,])
plot(shape[shape$SP_ID == 105,])
plot(shape[shape$SP_ID == 196,])
plot(shape[shape$CCGname == "Wirral",])
setwd("~/4th Year/project/model/var model")
W = read.csv("../../data/csv/adjacency.csv")
W$X = NULL
W_n = floor(sum(W)/2)
observed = read.csv("../../data/csv/simulated_spatial_corr.csv")
observed$X = NULL
expected = read.csv("../../data/csv/expected.csv")
expected$X = NULL
log_expected = c(log(expected))
numRegions = dim(observed)[1]
numRegions = nrow(observed)
nt = dim(observed)[2]
alpha = 0.9
model_data <- list(numRegions = numRegions,
nt = nt,
observed = as.matrix(observed),
log_expected = log_expected$x,
W_n = W_n,
W = as.matrix(W),
alpha = alpha)
library(rstan)
model <- stan_model(file = "var.stan")
model_nuts <- sampling(model, data = model_data, chains = 1, iter = 2000)
model_data <- extract(model_nuts)
result_unsorted2 <- colMeans(model_data$indicator)
result2 <- sort(result_unsorted2, index.return=TRUE)
result2
unusual
View(observed)
regions_identified <- c(2, 6, 8, 10, 11)
anom_regions <- c(3, 23, 25, 27, 43, 86, 100, 125, 130, 152)
not_identified <- c(169, 140, 130, 69, 118, 155, 13, 153, 117, 206)
numRegions <- length(shape@data$SP_ID)
cols <- rep('white', numRegions)
cols[regions_identified] <- rep('forestgreen', length(regions_identified))
cols[anom_regions] <- rep('firebrick2', length(anom_regions))
cols[not_identified] <- rep('dodgerblue', length(not_identified))
plot(shape, col=cols)
regions_identified <- c(8, 10, 11)
anom_regions <- c(3, 23, 25, 27, 43, 86, 100, 125, 130, 152, 82, 181)
not_identified <- c(169, 140, 130, 69, 118, 155, 13, 153, 117, 206, 2, 6)
numRegions <- length(shape@data$SP_ID)
cols <- rep('white', numRegions)
cols[regions_identified] <- rep('forestgreen', length(regions_identified))
cols[anom_regions] <- rep('firebrick2', length(anom_regions))
cols[not_identified] <- rep('dodgerblue', length(not_identified))
plot(shape, col=cols)
unusual_temp <- read.csv('~/4th Year/project/data/csv/prefUnusual.csv', header=FALSE)
unusual <- sort(unusual_temp$V1) + 1 #add one as python had zero index
numRegions <- length(shape@data$SP_ID)
cols <- rep('blue', numRegions)
cols[unusual] <- rep('red', length(unusual))
plot(shape, col=cols)
regions_identified <- c(8, 10, 11)
anom_regions <- c(3, 23, 25, 27, 43, 86, 100, 125, 130, 152, 2, 6)
not_identified <- c(169, 140, 130, 69, 118, 155, 13, 153, 117, 206, 82, 181)
numRegions <- length(shape@data$SP_ID)
cols <- rep('white', numRegions)
cols[regions_identified] <- rep('forestgreen', length(regions_identified))
cols[anom_regions] <- rep('firebrick2', length(anom_regions))
cols[not_identified] <- rep('dodgerblue', length(not_identified))
plot(shape, col=cols)
sample(1:210, 15)
foo <- sample(1:210, 15)
bar 1:15
bar <- 1:15
intersect(foo, bar)
foo
length(intersect(sample(1:210, 15), 1:15))
length(intersect(sample(1:210, 15), 1:15))
length(intersect(sample(1:210, 15), 1:15))
length(intersect(sample(1:210, 15), 1:15))
foobar <- rep(length(intersect(sample(1:210, 15), 1:15)), 10000)
mean(foobar)
foobar
foobar <- replicate(10000, length(intersect(sample(1:210, 15), 1:15)))
hist(foobar)
mean(foobar)
set.seed(314)
rwalk <- random_walk(len=15, sigma=0.1)
rwalk <- rwalk - mean(rwalk)
random_walk <- function(len, sigma) {
walk <- rep(0, len)
walk[1] <- rnorm(1, sd=sigma)
for(i in 2:len) {
walk[i] <- walk[i-1] + rnorm(1, sd=sigma)
}
return(walk)
}
set.seed(314)
rwalk <- random_walk(len=15, sigma=0.1)
rwalk <- rwalk - mean(rwalk)
plot(rwalk_unusual, type='l', col='red')
rwalk_unusual <- rwalk
rwalk_unusual[10:15] <- rwalk_unusual[10:15] + abs(rnorm(n=6, sd = 0.3))
plot(rwalk_unusual, type='l', col='red')
lines(rwalk, type='l', col='blue')
ylab('Temporal trend')
plot(rwalk_unusual, type='l', col='red', ylab('Temporal trend'), xlab('t'))
plot(rwalk_unusual, type='l', col='red', ylab = 'Temporal trend', xlab = 't')
lines(rwalk, type='l', col='blue')
regions_identified <- c(8, 10, 11)
not_identified <- c(3, 23, 25, 27, 43, 86, 100, 125, 130, 152, 2, 6)
anom_regions <- c(169, 140, 130, 69, 118, 155, 13, 153, 117, 206, 82, 181)
numRegions <- length(shape@data$SP_ID)
cols <- rep('white', numRegions)
cols[regions_identified] <- rep('forestgreen', length(regions_identified))
cols[anom_regions] <- rep('firebrick2', length(anom_regions))
cols[not_identified] <- rep('dodgerblue', length(not_identified))
plot(shape, col=cols)
phyper(15, 15, 195)
phyper(m=15, n=195, k=15)
phyper(3, 15, 195, 15)
phyper(1, 15, 195, 15)
phyper(0, 15, 195, 15)
phyper(1.07, 15, 195, 15)
phyper(1, 15, 195, 15)
phyper(0.7, 15, 195, 15)
phyper(0.9, 15, 195, 15)
phyper(1, 15, 195, 15)
foobar <- replicate(10000, length(intersect(sample(1:210, 15), 1:15)))
mean(foobar >= 3)
phyper(2, 15, 195, 15)
1 - phyper(3, 15, 195, 15)
1 - phyper(2, 15, 195, 15)
foobar <- replicate(10000, length(intersect(sample(1:210, 15), 1:15)))
1:4
foobar[1:5]
foobar[1:5]
foobar[1:5]
foobar[1:5]
foobar[1:5]
foobar[10:50]
mean(foobar == 0)
mean(foobar == 1)
mean(foobar == 2)
1 - phyper(2, 15, 195, 15)
1 - mean(foobar < 3)
round(0.07967562, 3)
round(0.07967562, 5)
numRegions <- length(shape@data$SP_ID)
cols <- rep('blue', numRegions)
cols[unusual] <- rep('red', length(unusual))
plot(shape, col=cols)
'red'
source('~/4th Year/project/scripts/prefData.R')
numRegions <- length(shape@data$SP_ID)
cols <- rep('white', numRegions)
cols[unusual] <- rep('yellow', length(unusual))
plot(shape, col=cols)
